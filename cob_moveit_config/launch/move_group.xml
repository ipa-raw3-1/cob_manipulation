<launch>
  <arg name="robot" default="$(env ROBOT)"/>
  <arg name="config_path" default="$(find cob_moveit_config)/$(arg robot)/config"/>

  <arg name="pipeline" default="ompl" />

  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <arg name="info" default="$(arg debug)" />  
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="false"/>

  <include file="$(find cob_moveit_config)/launch/planning_context.xml">
    <arg name="robot" value="$(arg robot)"/>
  </include>

  <group ns="move_group">
    <!-- The MoveIt Controller Manager Plugin to use -->
    <param name="moveit_controller_manager" value="pr2_moveit_controller_manager/Pr2MoveItControllerManager" />

    <!-- Configuration for the above controller manager -->
    <rosparam command="load" file="$(arg config_path)/controllers.yaml" /> <!-- Names of available controllers + their joints -->
    <param name="use_controller_manager" value="false" /> <!-- Do not use the PR2 controller manager -->
  </group>

  <include ns="move_group" file="$(find cob_moveit_config)/launch/planning_pipeline.xml">
      <arg name="pipeline" value="$(arg pipeline)"/>
      <arg name="robot" value="$(arg robot)"/>
  </include>


<!--  
  <include ns="move_group" file="$(find raw3-1)/launch/trajectory_execution.launch" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_controller_manager" value="raw3-1" /> 
    <arg name="moveit_manage_controllers" value="true" />
  </include>

  <include ns="move_group" file="$(find raw3-1)/launch/sensor_manager.launch" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="raw3-1" /> 
  </include>
-->

  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />


    <!-- Params for the octomap monitor -->
  
    <param name="octomap_frame" type="string" value="odom_combined" />
    <param name="octomap_resolution" type="double" value="0.05" />
    <param name="max_range" type="double" value="5.0" />
    
    <!-- sensors used to update the map -->
    <rosparam command="load" file="$(arg config_path)/sensors_kinect.yaml" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
				      move_group/MoveGroupExecuteService
				      move_group/MoveGroupKinematicsService
				      move_group/MoveGroupMoveAction
				      move_group/MoveGroupPickPlaceAction
				      move_group/MoveGroupPlanService
				      move_group/MoveGroupQueryPlannersService
				      move_group/MoveGroupStateValidationService
				      " />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>
  
</launch>
